#include<stdio.h>
#include<stdlib.h>


int main(void)
{

	

	/*
	int iArray[30];


	for (int i = 0; i < 30; i++)
	{
		iArray[i];
	}


	for (int i = 0; i < 30; i++)
	{
		printf_s("%d\n", iArray[i]);
	}

	system("pause");
	*/
	/***************************************************
 		
		매우중요

		배열의 장점

		직접 인덱스에 접근이 가능
		편리함
		접근속도가 항상 일정하기 때문에 매우 빠르다.

		배열의 단점

		길이 값을 한 번 선언하면 변경이 불가능하다 [상수]
		배열의 길이는 실수로 선언할 수 없다
		증감도 되지 않는다.


		배열의 길이는 정수형이며 상수이다.
		부하가 심하다

	*****************************************************/

	
//int iArray[2][3][4][5] =
//{
//	{
//
//		{
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//
//		},
//
//		{
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//
//		},
//		{
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//
//		},
//
//
//
//
//	},
//	{
//
//		{
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//
//		},
//
//		{
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//
//		},
//		{
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//			{0, 1, 2, 3, 4},
//
//		},
//
//
//	},
//
//
//
//};


int iArray[2][3][4][5];
int iCount = 0;

for (int i = 0; i < 2; i++)
{
	for (int j = 0; j < 3; j++)
	{
		for (int k = 0; k < 4; k++)
		{
			for (int l = 0; l < 5; l++)
			{
				iArray[i][j][k][l] = iCount++;
				printf_s("%d\n", iArray[i][j][k][l]);
			}
		}
	}
}

system("pause");
system("cls");


int iNumber = 10;
int *piNum = &iNumber;


printf_s("%p : iNumber 의 주소\n", &iNumber);
printf_s("%p : piNum 변수가 담고있는 주소\n", piNum);

printf_s("%p : piNum 의 주소\n", &piNum);

printf_s("%d : piNum 변수가 담고있는 주소의 값\n", *piNum);
printf_s("%d : iNumber 의 값\n", iNumber);


system("pause");




return 0;

}


/***********************************
포인터
[&]주소반환 연산자 
항목의 앞쪽에 위치
2개 동시반환 불가 2개를 써야 가능

포인터변수에 *를 붙이면 포인터변수가 
가르키고 있는 공간의 데이터를 반환한다.
보통은 항목의 앞에 위치.
형태일때는 뒤에 위치.
(포인터 형태로 값을 반환할 때)
***********************************/




